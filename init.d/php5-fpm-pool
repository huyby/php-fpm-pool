#!/bin/sh
### BEGIN INIT INFO
# Provides:          php-fpm php5-fpm
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6	
# Short-Description: starts php5-fpm
# Description:       Starts The PHP FastCGI Process Manager Daemon for a specific pool configuration having a separate PID
### END INIT INFO

# Author: Ondrej Sury <ondrej@debian.org>
# Modified by Stijn Huyberechts 
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="PHP5 FastCGI Process Manager"
FPM_CONFIG_PATH=/etc/php5/fpm/pool.d
FPM_CONFIG_EXT=".conf"
DAEMON_NAME=php5-fpm
DAEMON=/usr/sbin/$DAEMON_NAME
DAEMON_ARGS="--daemonize --fpm-config"
TIMEOUT=30
SCRIPTNAME=/etc/init.d/php-fpm-pool
INIT_VERBOSE=yes

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

check_for_upstart() {
	if init_is_upstart; then
		echo "is upstart"
		exit $1
	fi
}

#
# Function to check the correctness of the config file
#
do_check()
{
	errors=$($DAEMON --fpm-config $FPM_CONFIG_PATH/$NAME$FPM_CONFIG_EXT -t 2>&1 | grep "ERROR" || true);
	if [ -n "$errors" ]; then
	    echo "Please fix your configuration file..."
	    echo $errors
	    return 1
	fi
	return 0
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS $FPM_CONFIG_PATH/$NAME$FPM_CONFIG_EXT 2>/dev/null \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=QUIT/$TIMEOUT/TERM/5/KILL/5 --pidfile $PIDFILE --name $DAEMON_NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/TERM/5/KILL/5 --exec $DAEMON --user $USERNAME
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal USR2 --quiet --pidfile $PIDFILE --name $DAEMON_NAME
	return 0
}

usage() {
	log_daemon_msg "Usage: $SCRIPTNAME poolname {start|stop|status|restart|reload|force-reload}" >&2
	 exit 1
}

# We need 2 arguments, $1 as pool name, $2 preferred action
if [ $# -ne 2 ]
then
	usage
fi

CONF_FILE=$FPM_CONFIG_PATH/$1$FPM_CONFIG_EXT
# Check if config exists
if [ -r "$CONF_FILE" ]
then
	NAME=$1
	USERNAME=$(sed -n 's/^[[:space:]]*user[[:space:]]*=[[:space:]]*//p' $CONF_FILE)
	PIDFILE=$(sed -n 's/^[[:space:]]*pid[[:space:]]*=[[:space:]]*//p' $CONF_FILE)
else
	log_daemon_msg "Pool config with '$CONF_FILE' does not exist."
	usage
fi

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

case "$2" in
    start)
	check_for_upstart 1
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC for pool" "$NAME"
	do_check $VERBOSE
	case "$?" in
	    0)
		do_start
		case "$?" in
		    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	    1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
    stop)
	#check_for_upstart 0
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC for pool" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
    status)
	check_for_upstart 1
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
    check)
        do_check
	;;
    reload|force-reload)
	check_for_upstart 1
	log_daemon_msg "Reloading $DESC for pool" "$NAME"
	do_reload
	log_end_msg $?
	;;
    reopen-logs)
	check_for_upstart 1
	log_daemon_msg "Reopening $DESC logs for pool" $NAME
	if start-stop-daemon --stop --signal USR1 --oknodo --quiet \
	    --pidfile $PIDFILE --exec $DAEMON
	then
	    log_end_msg 0
	else
	    log_end_msg 1
	fi
	;;
    restart)
	check_for_upstart 1
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
    *)
	usage
    ;;
esac

:
